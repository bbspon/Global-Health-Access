const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
// üîê Generate JWT Token
const generateToken = (id) => {
    return jwt.sign({ id }, process.env.JWT_SECRET, {
      expiresIn: "7d",
    });
  };
  
exports.registerUser = async (req, res) => {
  try {
    const { name, email, phone, password, role } = req.body;
    console.log("Signup request:", { name, email, phone, role });

    const existingUser = await User.findOne({ email });
    console.log("Existing user check:", existingUser ? "Found" : "Not Found");

    if (existingUser) {
      return res.status(400).json({ success: false, message: "User already exists" });
    }

    const user = new User({ name, email, phone, password, role });
    const savedUser = await user.save();

    console.log("Saved user ID:", savedUser._id);

    const token = generateToken(user._id);

    res.status(201).json({
      success: true,
      message: "Signup successful",
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role,
      },
      token,
    });
  } catch (error) {
    console.error("Signup Error:", error);
    res.status(500).json({ success: false, message: "Signup failed", error: error.message });
  }
};

exports.loginUser = async (req, res) => {
  const { email, password } = req.body;
  console.log("Login attempt with email:", email);

  try {
    // 1Ô∏è‚É£ Check if user exists
    const user = await User.findOne({ email });
    console.log("User found:", user ? user._id : "No user");

    if (!user) {
      console.log("‚ùå User not found in DB for email:", email);
      return res.status(401).json({ message: "Invalid credentials" });
    }

    // 2Ô∏è‚É£ Validate password
    const isMatch = await user.matchPassword(password);
    console.log("Password match result:", isMatch);

    if (!isMatch) {
      console.log("‚ùå Password mismatch for email:", email);
      return res.status(401).json({ message: "Invalid credentials" });
    }

    // 3Ô∏è‚É£ Generate JWT token
    const token = generateToken(user._id); 
    console.log("‚úÖ Login successful, generated token for user:", user._id);

    // 4Ô∏è‚É£ Return response
    res.status(200).json({ token, user });
    
  } catch (err) {
    console.error("üî• Login error:", err.message);
    res.status(500).json({ message: "Server error" });
  }
};

