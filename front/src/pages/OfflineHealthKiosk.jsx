import React, { useState } from "react";

const translations = {
  en: {
    title: "Offline Health Access Kiosk",
    selectLanguage: "Select Language:",
    enterPatientId: "Enter Patient ID / Aadhaar / QR Code:",
    fetchDataBtn: "Fetch Patient Data",
    patientDetails: "Patient Details",
    plan: "Plan",
    medicalHistory: "Medical History",
    uploadDocs: "Upload Prescription / Reports:",
    queueSyncBtn: "Queue Data for Sync",
    noFilesAlert: "Please upload at least one document.",
    enterIdAlert: "Please enter Patient ID or scan QR",
  },
  hi: {
    title: "‡§ë‡§´‡§º‡§≤‡§æ‡§á‡§® ‡§π‡•á‡§≤‡•ç‡§• ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§ø‡§Ø‡•ã‡§∏‡•ç‡§ï",
    selectLanguage: "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
    enterPatientId: "‡§∞‡•ã‡§ó‡•Ä ‡§Ü‡§à‡§°‡•Ä / ‡§Ü‡§ß‡§æ‡§∞ / ‡§ï‡•ç‡§Ø‡•Ç‡§Ü‡§∞ ‡§ï‡•ã‡§° ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç:",
    fetchDataBtn: "‡§°‡•á‡§ü‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
    patientDetails: "‡§∞‡•ã‡§ó‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£",
    plan: "‡§Ø‡•ã‡§ú‡§®‡§æ",
    medicalHistory: "‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§á‡§§‡§ø‡§π‡§æ‡§∏",
    uploadDocs: "‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® / ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç:",
    queueSyncBtn: "‡§°‡•á‡§ü‡§æ ‡§∏‡§ø‡§Ç‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§§‡§æ‡§∞‡§¨‡§¶‡•ç‡§ß ‡§ï‡§∞‡•á‡§Ç",
    noFilesAlert: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§è‡§ï ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§",
    enterIdAlert: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§∞‡•ã‡§ó‡•Ä ‡§Ü‡§à‡§°‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§ï‡•ç‡§Ø‡•Ç‡§Ü‡§∞ ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡•á‡§Ç",
  },
  ta: {
    title: "‡ÆÜ‡ÆÉ‡Æ™‡Øç‡Æ≤‡Øà‡Æ©‡Øç ‡Æö‡ØÅ‡Æï‡Ææ‡Æ§‡Ææ‡Æ∞ ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æ≤‡Øç ‡Æï‡Æø‡ÆØ‡Ææ‡Æ∏‡Øç‡Æï‡Øç",
    selectLanguage: "‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç:",
    enterPatientId: "–ü–∞—Ü–∏–µ–Ω—Ç ‡Æê‡Æü‡Æø / ‡ÆÜ‡Æ§‡Ææ‡Æ∞‡Øç / QR ‡Æï‡ØÅ‡Æ±‡Æø‡ÆØ‡ØÄ‡Æü‡Øç‡Æü‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç:",
    fetchDataBtn: "‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡Æ™‡ØÜ‡Æ±‡ØÅ‡Æï",
    patientDetails: "‡Æ®‡Øã‡ÆØ‡Ææ‡Æ≥‡Æø ‡Æµ‡Æø‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç",
    plan: "‡Æ§‡Æø‡Æü‡Øç‡Æü‡ÆÆ‡Øç",
    medicalHistory: "‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡Æµ‡Æ∞‡Æ≤‡Ææ‡Æ±‡ØÅ",
    uploadDocs: "‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æï‡Øç ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡ØÅ / ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡Øá‡Æ±‡Øç‡Æ±‡ØÅ:",
    queueSyncBtn: "‡Æ§‡Æ∞‡Æµ‡Øà ‡Æí‡Æ§‡Øç‡Æ§‡Æø‡Æö‡Øà‡Æï‡Øç‡Æï ‡Æµ‡Æ∞‡Æø‡Æö‡Øà‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç",
    noFilesAlert: "‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§‡Æ§‡ØÅ ‡Æí‡Æ∞‡ØÅ ‡Æï‡Øã‡Æ™‡Øç‡Æ™‡Øà ‡Æ™‡Æ§‡Æø‡Æµ‡Øá‡Æ±‡Øç‡Æ±‡Æµ‡ØÅ‡ÆÆ‡Øç.",
    enterIdAlert: "‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æ®‡Øã‡ÆØ‡Ææ‡Æ≥‡Æø ‡Æê‡Æü‡Æø‡ÆØ‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ QR ‡Æê ‡Æ∏‡Øç‡Æï‡Øá‡Æ©‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç",
  },
  ar: {
    title: "ŸÉÿ¥ŸÉ ÿßŸÑŸàÿµŸàŸÑ ÿßŸÑÿµÿ≠Ÿä ÿØŸàŸÜ ÿßÿ™ÿµÿßŸÑ",
    selectLanguage: "ÿßÿÆÿ™ÿ± ÿßŸÑŸÑÿ∫ÿ©:",
    enterPatientId: "ÿ£ÿØÿÆŸÑ ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖÿ±Ÿäÿ∂ / ÿßŸÑŸáŸàŸäÿ© / ÿ±ŸÖÿ≤ ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ÿßŸÑÿ≥ÿ±Ÿäÿπÿ©:",
    fetchDataBtn: "ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ±Ÿäÿ∂",
    patientDetails: "ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑŸÖÿ±Ÿäÿ∂",
    plan: "ÿßŸÑÿÆÿ∑ÿ©",
    medicalHistory: "ÿßŸÑÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ∑ÿ®Ÿä",
    uploadDocs: "ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸàÿµŸÅÿ© / ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ±:",
    queueSyncBtn: "Ÿàÿ∂ÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÅŸä ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿ≤ÿßŸÖŸÜÿ©",
    noFilesAlert: "Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ≠ŸÖŸäŸÑ ŸÖŸÑŸÅ Ÿàÿßÿ≠ÿØ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ.",
    enterIdAlert: "Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖÿ±Ÿäÿ∂ ÿ£Ÿà ŸÖÿ≥ÿ≠ ÿ±ŸÖÿ≤ ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ÿßŸÑÿ≥ÿ±Ÿäÿπÿ©",
  },
};

export default function OfflineAccessKiosk() {
  const [language, setLanguage] = useState("en");
  const t = translations[language];

  const [patientID, setPatientID] = useState("");
  const [patientData, setPatientData] = useState(null);
  const [uploadFiles, setUploadFiles] = useState([]);

  // This function should now fetch real patient data from MongoDB
  const handleFetchPatient = async () => {
    if (!patientID.trim()) {
      alert(t.enterIdAlert);
      return;
    }

    try {
      const response = await fetch(
        `http://localhost:5000/api/kiosk/patient/${patientID}`
      );
      const data = await response.json();
      setPatientData(data);
    } catch (err) {
      alert("Patient not found or server error");
    }
  };

  const handleFileChange = (e) => {
    setUploadFiles(Array.from(e.target.files));
  };

  // This function should now send the uploaded prescriptions to backend
  const handleQueueSync = async () => {
    if (uploadFiles.length === 0) {
      alert(t.noFilesAlert);
      return;
    }

    const formData = new FormData();
    formData.append("patientId", patientID);
    uploadFiles.forEach((file) => formData.append("files", file));

    try {
      await fetch("http://localhost:5000/api/kiosk/upload", {
        method: "POST",
        body: formData,
      });

      alert("Upload successful. Data queued for sync.");
      setPatientID("");
      setPatientData(null);
      setUploadFiles([]);
    } catch (err) {
      alert("Upload failed");
    }
  };

  return (
    <div className="container my-4">
      <div className="card shadow-sm">
        <div className="card-header bg-primary text-white">
          <h4>ü©∫ {t.title}</h4>
        </div>
        <div className="card-body">
          {/* Language Select */}
          <div className="mb-3">
            <label htmlFor="languageSelect" className="form-label">
              {t.selectLanguage}
            </label>
            <select
              id="languageSelect"
              className="form-select w-auto"
              value={language}
              onChange={(e) => setLanguage(e.target.value)}
            >
              <option value="en">English</option>
              <option value="hi">‡§π‡§ø‡§Ç‡§¶‡•Ä</option>
              <option value="ta">‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç</option>
              <option value="ar">ÿßŸÑÿπÿ±ÿ®Ÿäÿ©</option>
            </select>
          </div>

          {/* Patient ID Input */}
          <div className="mb-3">
            <label htmlFor="patientIDInput" className="form-label">
              {t.enterPatientId}
            </label>
            <input
              type="text"
              id="patientIDInput"
              className="form-control"
              placeholder={t.enterPatientId}
              value={patientID}
              onChange={(e) => setPatientID(e.target.value)}
            />
            <button
              className="btn btn-secondary mt-2"
              onClick={handleFetchPatient}
            >
              {t.fetchDataBtn}
            </button>
          </div>

          {/* Patient Details */}
          {patientData && (
            <div className="card border-info mb-3">
              <div className="card-header bg-info text-white">
                {t.patientDetails}
              </div>
              <div className="card-body">
                <h5 className="card-title">{patientData.name}</h5>
                <p>
                  <strong>{t.plan}:</strong> {patientData.plan}
                </p>
                <p>
                  <strong>{t.medicalHistory}:</strong>
                </p>
                <ul>
                  {patientData &&
                  patientData.history &&
                  patientData.history.length > 0 ? (
                    <ul>
                      {patientData.history.map((item, index) => (
                        <li key={index}>{item}</li>
                      ))}
                    </ul>
                  ) : (
                    <p>No patient history found.</p>
                  )}
                </ul>

                {/* Document Upload */}
                <div className="mb-3">
                  <label htmlFor="docUpload" className="form-label">
                    {t.uploadDocs}
                  </label>
                  <input
                    type="file"
                    id="docUpload"
                    className="form-control"
                    accept="image/*,application/pdf"
                    multiple
                    onChange={handleFileChange}
                  />
                </div>

                <button
                  className="btn btn-success"
                  onClick={handleQueueSync}
                  disabled={uploadFiles.length === 0}
                >
                  {t.queueSyncBtn}
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
